name: Track New Repos with Tags

on:
  schedule:
    - cron: '0 14 * * *'
  workflow_dispatch:
  watch:
    types: [started]

jobs:
  create-tags:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write  # 必须的写入权限
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 获取完整历史记录
        ref: main       # 明确指定基础分支

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install requests pygithub

    - name: Get new repositories and create tags
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        import os
        import requests
        from datetime import datetime, timedelta

        # 获取最近一周创建的高星仓库
        def get_new_repos():
            created_date = (datetime.now() - timedelta(days=300)).strftime("%Y-%m-%d")
            url = f"https://api.github.com/search/repositories?q=created:>={created_date}+stars:>0+is:public&sort=updated&order=desc&per_page=1000"
            headers = {
                'Accept': 'application/vnd.github.v3+json',
                'Authorization': f"token {os.environ['GITHUB_TOKEN']}"
            }
            
            response = requests.get(url, headers=headers)
            if response.status_code != 200:
                raise Exception(f"API请求失败: {response.status_code} - {response.text}")
                
            repos = response.json().get('items', [])
            return [(repo['owner']['login'], repo['name']) for repo in repos]

        repo_data = get_new_repos()
        print(f"Found {len(repo_data)} new repositories")

        # 创建新分支
        timestamp = datetime.now().strftime("%Y%m%d")
        branch_name = f"auto-tags-{timestamp}"
        os.system(f"git checkout -b {branch_name}")

        # 为每个仓库创建空提交和tag
        for i, (username, repo_name) in enumerate(repo_data[:1000]):  # 限制数量
            email = f"{username}+ghactions@users.noreply.github.com"  # 修改邮箱格式
            tag_name = f"new/{repo_name.replace('/', '-')}/{timestamp}-{i}"  # 更安全的命名
            
            print(f"Processing {username}/{repo_name}")

            # 创建空提交（使用环境变量设置作者信息）
            os.system(f'''
            export GIT_AUTHOR_NAME="{username}"
            export GIT_AUTHOR_EMAIL="{email}"
            export GIT_COMMITTER_NAME="GitHub Actions"
            export GIT_COMMITTER_EMAIL="{email}"
            git commit --allow-empty -m "Track new repo: {username}/{repo_name}"
            ''')
            
            # 创建轻量级tag
            os.system(f'git tag {tag_name}')
            
            print(f"Created tag {tag_name}")

        # 推送分支和tags
        os.system(f"git push origin {branch_name}")
        os.system("git push origin --tags")
      shell: python
